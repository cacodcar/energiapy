import pytest

from energia.library.examples.energy import design_scheduling_material_modes


@pytest.fixture
def m():
    _m = design_scheduling_material_modes()
    _m.usd.spend.opt()
    _m.gwp.emit.opt()
    return _m


def _wrap_with_approx(expected, rel=1e-6, abs=1e-9):
    """
    Recursively wrap lists/floats in pytest.approx.
    """
    if isinstance(expected, dict):
        return {k: _wrap_with_approx(v, rel, abs) for k, v in expected.items()}
    elif isinstance(expected, (list, tuple)):
        return pytest.approx(expected, rel=rel, abs=abs)
    elif isinstance(expected, (int, float)):
        return pytest.approx(expected, rel=rel, abs=abs)
    else:
        return expected


def test_design_scheduling_materials(m):

    expected0 = {
        'consume': [
            1704.5555555555557,
            743.7129495073891,
            4.557293377120964,
            0.0,
            9941.934660645868,
            35927.19088669951,
            7000.0,
            700.0,
            0.0,
        ],
        'release': [135.0, 157.5, 180.0, 67.5],
        'emit': [
            43750.01642036126,
            0.0,
            21088358.834504403,
            4312620.954219459,
            7829500.0,
            85567370.0,
            0.0,
        ],
        'spend': [
            6661096.222632731,
            119054438.42364532,
            0.0,
            119054438.42364532,
            14100.775862068964,
            143904600.0,
            23000000.0,
            44695205.71975917,
            110084.83853311438,
            337439525.98043233,
        ],
        'capacity': [
            90.11083743842364,
            90.11083743842364,
            0.0,
            100.0,
            100.0,
            0.0,
            33.26491516146689,
            29.938423645320196,
        ],
        'x_capacity': [1.0, 1.0],
        'operate': [
            90.11083743842363,
            80.09852216748766,
            50.06157635467981,
            67.5,
            287.7709359605911,
            66.66666666666667,
            88.88888888888889,
            100.0,
            0.0,
            255.55555555555554,
            90.11083743842363,
            0.0,
            50.06157635467981,
            0.0,
            140.17241379310343,
            0.0,
            80.09852216748766,
            0.0,
            67.5,
            147.59852216748766,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            66.66666666666667,
            88.88888888888889,
            100.0,
            0.0,
            255.55555555555554,
            33.26491516146689,
            21.7775041050903,
            11.487411056376587,
            0.0,
            0.0,
            29.938423645320196,
            0.0,
            0.0,
            29.938423645320196,
            0.0,
        ],
        'invcapacity': [33.26491516146689, 0.0, 33.26491516146689],
        'x_invcapacity': [1.0],
        'inventory': [55.04241926655719, 21.7775041050903, 33.26491516146689, 0.0, 0.0],
        'produce': [
            90.11083743842363,
            0.0,
            50.06157635467981,
            0.0,
            90.11083743842363,
            80.09852216748766,
            50.06157635467981,
            67.5,
            0.0,
            80.09852216748766,
            0.0,
            67.5,
            0.0,
            0.0,
            0.0,
            0.0,
            66.66666666666667,
            88.88888888888889,
            100.0,
            0.0,
            66.66666666666667,
            88.88888888888889,
            100.0,
            0.0,
            21.7775041050903,
            11.487411056376587,
            0.0,
            0.0,
            0.0,
            0.0,
            29.938423645320196,
            0.0,
        ],
        'expend': [
            400.47258620689655,
            743.7129495073891,
            343.24036330049256,
            0.0,
            1704.5555555555557,
            1704.5555555555557,
            21.7775041050903,
            11.487411056376587,
            0.0,
            0.0,
            0.0,
            0.0,
            33.26491516146689,
            0.0,
        ],
        'use': [
            9903.181034482759,
            9903.181034482759,
            35927.19088669951,
            35927.19088669951,
            0.0,
            0.0,
            7000.0,
            7000.0,
            700.0,
            700.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            38.753626163108926,
            4.557293377120964,
            4.557293377120964,
            38.753626163108926,
        ],
    }

    expected1 = {
        'consume': [
            1646.4150205761312,
            802.4777777777778,
            0.0,
            5.13573816872428,
            11033.672518004116,
            39870.0,
            6349.421296296294,
            0.0,
            634.9421296296294,
        ],
        'release': [135.0, 157.5, 180.0, 148.32690329218104],
        'emit': [
            0.0,
            14380.066872427984,
            23404101.24028763,
            4785907.086,
            7101827.719907405,
            0.0,
            62634945.77893517,
            97941161.89200264,
        ],
        'spend': [
            7392560.587062757,
            132120000.0,
            0.0,
            132120000.0,
            15788.888888888889,
            130530133.12499996,
            27211805.555555556,
            50368246.013374485,
            125915.63786008225,
            347764449.80774176,
        ],
        'capacity': [
            100.0,
            100.0,
            0.0,
            90.70601851851849,
            0.0,
            90.70601851851849,
            37.48713991769547,
            33.738425925925924,
        ],
        'x_capacity': [1.0, 1.0],
        'operate': [
            100.0,
            88.88888888888889,
            55.55555555555556,
            77.77777777777777,
            322.22222222222223,
            60.470679012345656,
            80.62757201646089,
            90.70601851851849,
            70.54912551440326,
            302.3533950617283,
            100.0,
            0.0,
            0.0,
            0.0,
            100.0,
            0.0,
            88.88888888888889,
            55.55555555555556,
            77.77777777777777,
            222.22222222222223,
            60.470679012345656,
            0.0,
            90.70601851851849,
            70.54912551440326,
            221.72582304526742,
            0.0,
            80.62757201646089,
            0.0,
            0.0,
            80.62757201646089,
            37.48713991769547,
            25.470679012345656,
            12.01646090534982,
            0.0,
            0.0,
            33.738425925925924,
            0.0,
            0.0,
            33.738425925925924,
            0.0,
        ],
        'invcapacity': [37.48713991769547, 37.48713991769547, 0.0],
        'x_invcapacity': [1.0],
        'inventory': [
            62.95781893004113,
            25.470679012345656,
            37.48713991769547,
            0.0,
            0.0,
        ],
        'produce': [
            100.0,
            0.0,
            0.0,
            0.0,
            100.0,
            88.88888888888889,
            55.55555555555556,
            77.77777777777777,
            0.0,
            88.88888888888889,
            55.55555555555556,
            77.77777777777777,
            60.470679012345656,
            0.0,
            90.70601851851849,
            70.54912551440326,
            60.470679012345656,
            80.62757201646089,
            90.70601851851849,
            70.54912551440326,
            0.0,
            80.62757201646089,
            0.0,
            0.0,
            25.470679012345656,
            12.01646090534982,
            0.0,
            0.0,
            0.0,
            0.0,
            33.738425925925924,
            0.0,
        ],
        'expend': [
            285.7,
            802.4777777777778,
            516.7777777777778,
            1108.629115226337,
            1646.4150205761312,
            537.7859053497941,
            25.470679012345656,
            12.01646090534982,
            0.0,
            0.0,
            0.0,
            0.0,
            37.48713991769547,
            0.0,
        ],
        'use': [
            10990.0,
            10990.0,
            39870.0,
            39870.0,
            0.0,
            0.0,
            0.0,
            6349.421296296294,
            0.0,
            0.0,
            6349.421296296295,
            634.9421296296294,
            634.9421296296294,
            5.13573816872428,
            5.13573816872428,
            43.672518004115226,
            43.672518004115226,
            0.0,
            0.0,
            0.0,
        ],
    }

    assert m.solution[0].asdict() == _wrap_with_approx(expected0)
    assert m.solution[1].asdict() == _wrap_with_approx(expected1)
