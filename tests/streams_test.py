import pytest


from energia.library.examples.energy import design_scheduling_material


@pytest.fixture
def m():
    _m = design_scheduling_material()
    _m.gwp.emit.opt()
    _m.usd.spend.opt()
    return _m


def _wrap_with_approx(expected, rel=1e-6, _abs=1e-9):
    """
    Recursively wrap lists/floats in pytest.approx.
    """
    if isinstance(expected, dict):
        return {k: _wrap_with_approx(v, rel, _abs) for k, v in expected.items()}
    elif isinstance(expected, (list, tuple)):
        return pytest.approx(expected, rel=rel, abs=_abs)
    elif isinstance(expected, (int, float)):
        return pytest.approx(expected, rel=rel, abs=_abs)
    else:
        return expected


def test_multistreams(m):
    expected0 = {
        'consume': [
            66.6666666666667,
            88.88888888888894,
            100.00000000000006,
            77.77777777777781,
            322.22222222222223,
            104148.14814814815,
        ],
        'release': [159.78395061728415, 157.49999999999997, 180.0, 155.5555555555556],
        'capacity': [100.0, 100.00000000000006, 27.160493827160423, 24.44444444444438],
        'x_capacity': [1.0, 1.0],
        'operate': [
            100.0,
            88.8888888888889,
            55.55555555555556,
            77.77777777777777,
            322.22222222222223,
            66.6666666666667,
            88.88888888888894,
            100.00000000000006,
            77.77777777777781,
            333.33333333333354,
            27.160493827160423,
            6.882716049382552,
            20.27777777777787,
            0.0,
            0.0,
            24.44444444444438,
            0.0,
            0.0,
            24.44444444444438,
            0.0,
        ],
        'spend': [
            99399100.0,
            15788.888888888889,
            143904600.0000001,
            30000000.00000002,
            36493219.75308632,
            68086.41975308595,
            1770518.5185185184,
        ],
        'invcapacity': [27.160493827160423],
        'x_invcapacity': [1.0],
        'inventory': [
            34.043209876542974,
            6.882716049382552,
            27.160493827160423,
            0.0,
            0.0,
        ],
        'emit': [
            100000.0,
            200000.00000000012,
            81481.48148148127,
            93733.33333333333,
            475214.8148148147,
        ],
        'use': [40000.0, 56000.00000000003, 8148.148148148127],
        'produce': [
            100.0,
            88.8888888888889,
            55.55555555555556,
            77.77777777777777,
            66.6666666666667,
            88.88888888888894,
            100.00000000000006,
            77.77777777777781,
            6.882716049382552,
            20.27777777777787,
            0.0,
            0.0,
            0.0,
            0.0,
            24.44444444444438,
            0.0,
        ],
        'expend': [
            322.22222222222223,
            66.6666666666667,
            88.88888888888894,
            100.00000000000006,
            77.77777777777781,
            6.882716049382552,
            20.27777777777787,
            0.0,
            0.0,
            0.0,
            0.0,
            27.160493827160423,
            0.0,
        ],
    }

    expected1 = {
        'consume': [
            41.882716049382566,
            88.88888888888889,
            100.0,
            0.0,
            311.94444444444446,
            104148.14814814815,
        ],
        'release': [135.0, 157.5, 180.0, 67.5],
        'capacity': [100.0, 100.0, 27.160493827160423, 24.444444444444443],
        'x_capacity': [1.0, 1.0],
        'operate': [
            100.0,
            88.88888888888889,
            55.55555555555556,
            67.5,
            311.94444444444446,
            41.882716049382566,
            88.88888888888889,
            100.0,
            0.0,
            230.77160493827148,
            27.160493827160423,
            6.882716049382594,
            20.27777777777778,
            0.0,
            0.0,
            24.444444444444443,
            0.0,
            0.0,
            24.444444444444443,
            0.0,
        ],
        'spend': [
            99399100.0,
            15285.277777777777,
            143904600.0,
            20769444.444444444,
            36493219.75308632,
            68086.41975308604,
            1770518.5185185184,
            302420254.4135801,
        ],
        'invcapacity': [27.160493827160423],
        'x_invcapacity': [1.0],
        'inventory': [
            34.04320987654302,
            6.882716049382594,
            27.160493827160423,
            0.0,
            0.0,
        ],
        'emit': [
            100000.0,
            200000.0,
            81481.48148148127,
            93733.33333333333,
            475214.81481481466,
        ],
        'use': [40000.0, 56000.0, 8148.148148148127],
        'produce': [
            100.0,
            88.88888888888889,
            55.55555555555556,
            67.5,
            41.882716049382566,
            88.88888888888889,
            100.0,
            0.0,
            6.882716049382594,
            20.27777777777778,
            0.0,
            0.0,
            0.0,
            0.0,
            24.444444444444443,
            0.0,
        ],
        'expend': [
            311.94444444444446,
            41.882716049382566,
            88.88888888888889,
            100.0,
            0.0,
            6.882716049382594,
            20.27777777777778,
            0.0,
            0.0,
            0.0,
            0.0,
            27.160493827160423,
            0.0,
        ],
    }

    assert m.solution[0].asdict() == _wrap_with_approx(expected0)
    assert m.solution[1].asdict() == _wrap_with_approx(expected1)
